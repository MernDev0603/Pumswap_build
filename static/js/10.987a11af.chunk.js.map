{"version":3,"sources":["components/SearchInput/SearchInput.tsx","components/Loading.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/Farms.tsx"],"names":["StyledInput","styled","Input","InputWrapper","div","theme","mediaQueries","sm","SearchInput","onChangeCallback","onChange","placeholder","useState","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","value","target","Loading","Wrapper","colors","primary","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","ControlContainer","LabelWrapper","FilterContainer","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useRouteMatch","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","viewMode","sortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","PageHeader","as","fontFamily","paddingTop","opacity","textAlign","Page","endIcon","padding","ViewMode","TABLE","sort","b","exact","renderContent","src","alt"],"mappings":"+ZAMMA,EAAcC,YAAOC,IAAPD,CAAH,4GAOXE,EAAeF,IAAOG,IAAV,sFAEd,qBAAGC,MAAkBC,aAAaC,MAgCvBC,EAtBsB,SAAC,GAA4D,IAAhDC,EAA+C,EAAzDC,SAAyD,IAA7BC,mBAA6B,MAAf,SAAe,EAC/F,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEQC,EAAMC,cAAND,EAEFE,EAAoBC,mBACxB,kBAAMC,KAAS,SAACC,GAAD,OAA4CX,EAAiBW,KAAI,OAChF,CAACX,IAQH,OACE,cAACN,EAAD,UACE,cAACH,EAAD,CAAaqB,MAAOR,EAAYH,SAPnB,SAACU,GAChBN,EAAcM,EAAEE,OAAOD,OACvBJ,EAAkBG,IAKoCT,YAAaI,EAAEJ,QCZ1DY,EA5BCtB,IAAOG,IAAV,miB,QCQPoB,EAAUvB,IAAOG,IAAV,sJAOD,qBAAGC,MAAkBoB,OAAOC,WAIlCC,EAAkE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC1Ed,EAAMC,cAAND,EAER,OACE,eAACS,EAAD,CAAS,aAAYT,EAAE,mCAAoCe,KAAK,SAASF,QAASA,EAAlF,UACE,cAAC,KAAD,CAAMG,MAAM,UAAUC,MAAI,EAA1B,SACcjB,EAAXc,EAAa,OAAY,aAE3BA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCF,EAAwBM,aAAe,CACrCJ,UAAU,GAGGF,I,0LAAAA,K,2BCrBAO,GAbkB,SAAC,GAMnB,IALbC,EAKY,EALZA,kBACAC,EAIY,EAJZA,aAKMC,EAAcC,KAAOC,KAAKC,QAE1BC,EAAcL,GAAgBA,IAAiBC,EAAsBD,EAAR,MACnE,MAAM,GAAN,OAFmBD,GAAqBA,IAAsBE,EAAsBF,EAAR,MAE5E,YAAuBM,ICAnBjB,GAAUvB,IAAOG,IAAV,iDAIPsC,GAAqBzC,YAAO0C,IAAP1C,CAAH,iDA6BT2C,GAzB0C,SAAC,GAOnD,IANLC,EAMI,EANJA,eACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,QACAC,EACI,EADJA,gBAEQnC,EAAMC,cAAND,EAER,OACE,eAAC,GAAD,WACE,eAAC,IAAD,CAAMoC,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOpC,EAAE,mBAAT,OACCiC,EAAsB,cAAC,KAAD,UAAOA,IAA8B,cAAC,KAAD,CAAUI,MAAO,GAAIC,OAAQ,SAEzFN,GACA,cAACL,GAAD,CAAoBY,KAAMJ,EAA1B,SAA4CnC,EAAE,eAAgB,CAAEwC,OAAQN,MAE1E,cAACP,GAAD,CAAoBY,KAAMT,EAA1B,SAA2C9B,EAAE,mBAC7C,cAAC2B,GAAD,CAAoBY,KAAMR,EAA1B,SAAwC/B,EAAE,uB,oBC3B1CS,GAAUvB,YAAOuD,IAAPvD,CAAH,kEAMPwD,GAAgBxD,YAAOyD,KAAPzD,CAAH,iDAuBJ0D,GAnBuC,SAAC,GAAiE,IAA/DV,EAA8D,EAA9DA,QAASW,EAAqD,EAArDA,WAAYC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACpG,OACE,eAAC,GAAD,CAASZ,eAAe,gBAAgBa,WAAW,SAASC,GAAG,OAA/D,UACE,cAAC,KAAD,CAAgBC,QAAQ,WAAWC,aAAcL,EAAOM,eAAgBL,EAAYX,MAAO,GAAIC,OAAQ,KACvG,eAAC,IAAD,CAAMgB,cAAc,SAASL,WAAW,WAAxC,UACE,cAAC,IAAD,CAASC,GAAG,MAAZ,SAAmBhB,EAAQqB,MAAM,KAAK,KACtC,eAAC,IAAD,CAAMnB,eAAe,SAArB,UACGU,EAAkB,cAAC,KAAD,IAAmB,cAAC,KAAD,IACrCD,EACC,cAACH,GAAD,CAAeS,QAAQ,YAAvB,SAAoCN,IAEpC,cAAC,KAAD,CAAUW,GAAG,MAAMnB,MAAO,GAAIC,OAAQ,e,2ECN5CmB,GAAevE,IAAOG,IAAV,+DACN,SAACqE,GAAD,OAAWA,EAAMC,QAClB,SAACD,GAAD,OAAWA,EAAMC,QAGbC,GA5BuB,SAAC,GAAqB,IAGtDC,EAHqD,IAAlBF,YAAkB,MAAX,KAAW,EACjDG,EAAYC,qBAAWC,KAAvBF,QAGR,OAAQH,GACN,IAAK,KACHE,EAAIC,EAAQ,GACZ,MACF,IAAK,KACHD,EAAIC,EAAQ,GACZ,MACF,IAAK,KACL,QACED,EAAIC,EAAQ,GAGhB,OAAO,cAACL,GAAD,CAAcE,KAAME,KCLvBI,GAAqB/E,IAAOG,IAAV,qIAEF,SAACqE,GAAD,OAAWA,EAAMpE,MAAMoB,OAAOwD,eAGvC,SAACR,GAAD,OAAWA,EAAMpE,MAAMwE,QAAQ,MAGtCK,GAAoBjF,IAAOG,IAAV,wCAIR+E,GA1BgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAIC,IAAMC,SAASC,QAAQJ,GAAUK,OAC3C,OACE,cAACT,GAAD,UACGM,IAAMC,SAASG,IAAIN,GAAU,SAACO,EAAOC,GAAR,OAC5B,qCACE,cAACV,GAAD,UAAoBS,IACnBC,EAAIP,EAAI,GAAK,cAAC,GAAD,a,SCgBlBQ,GAAmB5F,IAAOG,IAAV,0MAGA,qBAAGC,MAAkBoB,OAAOqE,SAX7B,SAAC,GAAkC,IAAD,IAA/BC,iBAA+B,SAAZ1F,EAAY,EAAZA,MACzC,OAAI0F,EACK1F,EAAM2F,QAAQC,QAGhB5F,EAAM2F,QAAQE,SASZ,qBAAG7F,MAAkBoB,OAAO0E,QAKjCnG,GAAcC,YAAOC,IAAPD,CAAH,2LAOb,qBAAGI,MAAkBC,aAAa8F,MAIlC,qBAAG/F,MAAkBC,aAAaC,MAKhC8F,GAAqBpG,YAAOqG,KAAPrG,CAAH,uGAiETsG,GAzD+B,SAAC,GASxC,IARLC,EAQI,EARJA,IACAjD,EAOI,EAPJA,OACA7C,EAMI,EANJA,SACA+F,EAKI,EALJA,YACApF,EAII,EAJJA,MACA6B,EAGI,EAHJA,gBACAwD,EAEI,EAFJA,WAEI,IADJC,gBACI,MADO,GACP,EACI5F,EAAMC,cAAND,EACF6F,EAAwB,MAARJ,IAAgBA,EAWtC,OACE,sBAAKK,MAAO,CAAEC,SAAU,YAAxB,UACE,eAACjB,GAAD,CAAkBE,UAAWa,EAA7B,UACE,eAAC,IAAD,CAAMzD,eAAe,gBAAgB4D,GAAG,OAAxC,UACE,cAAC,KAAD,CAAMC,SAAS,OAAf,SAAuBN,IACvB,cAAC,KAAD,CAAMM,SAAS,OAAf,SAAuBjG,EAAE,qBAAsB,CAAEkG,QAdlC,SAACA,GACtB,GAAIL,EACF,MAAO,IAGT,IAAMM,EAAeC,sBAAWF,EAASN,GACzC,OAAOS,YAAgBF,EAAcP,EAAUA,GAQiBU,CAAeb,UAE3E,eAAC,IAAD,CAAMxC,WAAW,WAAWb,eAAe,eAA3C,UACE,cAAC,GAAD,CACEmE,QAAO,8BAAyBX,EAAzB,MACPY,UAAU,UACVC,KAAK,MACLC,IAAI,IACJ/G,SAAUA,EACVC,YAAY,IACZU,MAAOA,IAET,cAAC,IAAD,CAAQqG,MAAM,KAAK9F,QAAS6E,EAAakB,GAAG,MAA5C,SACG5G,EAAE,SAEL,cAAC,KAAD,CAAMiG,SAAS,OAAf,SAAuBzD,UAG1BqD,GACC,eAACP,GAAD,CAAoBW,SAAS,OAAOjF,MAAM,UAA1C,UACGhB,EAAE,sBADL,IAC6B,IAC3B,cAAC,IAAD,CAAMiG,SAAS,OAAOhF,MAAM,EAAOsB,KAAMJ,EAAiB0E,UAAQ,EAAC7F,MAAM,UAAzE,SACGhB,EAAE,eAAgB,CAAEwC,oB,8BCpG3BsE,GAAqB5H,YAAOuD,IAAPvD,CAAH,gDAIlB6H,GAAmB7H,YAAOqG,KAAPrG,CAAH,uIA0JP8H,GAnImC,SAAC,GAa5C,IAZLvB,EAYI,EAZJA,IACAwB,EAWI,EAXJA,cACAC,EAUI,EAVJA,UACAC,EASI,EATJA,UASI,IARJC,iBAQI,MARQ,GAQR,EAPJvE,EAOI,EAPJA,WACAwE,EAMI,EANJA,WACAC,EAKI,EALJA,QACApF,EAII,EAJJA,QACAqF,EAGI,EAHJA,IACApF,EAEI,EAFJA,gBACAqF,EACI,EADJA,UAEA,EAAsB3H,mBAAS,IAA/B,mBAAO4H,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkChI,oBAAS,GAA3C,mBAAOiI,EAAP,KAAkBC,EAAlB,KACA,EAAkDlI,oBAAS,GAA3D,mBAAOmI,EAAP,KAA0BC,EAA1B,KACQjI,EAAMC,cAAND,EACFkI,EAAc/H,mBAAQ,WAC1B,OAAOgI,YAAsB1C,KAC5B,CAACA,IAEE2C,EAAkB,IAAIC,IAAUZ,GAChCa,EAAoB,IAAID,IAAUH,GAElCK,EAAaH,EAAgBI,MAAMlB,GAEnCmB,EAAoBC,aAAqB,CAC7CC,eAAiBP,EAAgBQ,QAAkC,EAAxBL,EAAWM,WACtDtB,MACAuB,kBAAmBtB,EAAUqB,aAGzBE,EAAYvB,EAAUgB,MAAMC,EAAkB,IAC9CO,EAAqBC,YACzBF,EAAUF,WACVE,EAAUG,GAAG,KAAS,EAAI,EAC1BH,EAAUG,GAAG,KAAS,EAAI,GAGtBC,EAAeC,uBACnB,SAAC/I,GACKA,EAAEgJ,cAAcC,SAASC,OAC3B7B,EAAOrH,EAAEgJ,cAAc/I,MAAMkJ,QAAQ,KAAM,QAG/C,CAAC9B,IAGG+B,EAAkBL,uBAAY,WAClC1B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OAAIM,EAEA,cAAC0B,GAAA,EAAD,CACEC,UAAW3J,EAAE,eAAgB,CAAEwC,OAAQN,IACvC0H,oBAAqB3C,EAAc4C,KAAKpE,GACxCqE,mBAAoB1C,EACpB2C,kBAAmBzC,EAAQuB,WAC3BC,kBAAmBtB,EAAUqB,WAC7BtB,IAAKA,EACL1E,WAAYA,EACZwE,WAAYA,EACZ2C,SAAU7H,EACV8H,QAAM,EACNC,aAAczC,EACd0C,OAAQ,kBAAMlC,GAAqB,MAMvC,eAAC,KAAD,CAAOmC,MAAOpK,EAAE,mBAAoBmH,UAAWA,EAA/C,UACE,cAAC,GAAD,CACE7G,MAAOmH,EACP/B,YAAa+D,EACb9J,SAAUwJ,EACV1D,IAAKyC,EACL1F,OAAQ4E,EACRjF,gBAAiBA,EACjBwD,WAAY3F,EAAE,WAEhB,eAAC,IAAD,CAAMqK,GAAG,OAAOpH,WAAW,SAASb,eAAe,gBAAnD,UACE,eAAC,KAAD,CAAMwE,GAAG,MAAM5F,MAAM,aAArB,UACGhB,EAAE,+BADL,OAGA,eAAC8G,GAAD,CAAoB7D,WAAW,SAASpC,QAAS,kBAAMoH,GAAqB,IAA5E,UACE,eAAClB,GAAD,eAAoBiC,KACpB,cAAC,IAAD,CAAY7F,QAAQ,OAAOwD,MAAM,KAAjC,SACE,cAAC,IAAD,CAAe3F,MAAM,aAAaqB,MAAM,iBAI9C,eAAC,GAAD,WACE,cAAC,IAAD,CAAQc,QAAQ,YAAYtC,QAASsG,EAAW9E,MAAM,OAAOiI,SAAUxC,EAAvE,SACG9H,EAAE,YAEL,cAAC,IAAD,CACEqC,MAAM,OACNiI,SACExC,IAAcM,EAAgBmC,YAAcnC,EAAgBoC,GAAG,IAAMpC,EAAgBc,GAAGZ,GAE1FzH,QAAO,wBAAE,uBAAA4J,EAAA,6DACP1C,GAAa,GADN,kBAGCb,EAAUO,GAHX,OAILG,EAAa5H,EAAE,WAAYA,EAAE,4CAC7BmH,IALK,gDAOLU,EACE7H,EAAE,SACFA,EAAE,uFAEJ0K,QAAQC,MAAR,MAXK,yBAaL5C,GAAa,GAbR,4EALX,SAsBe/H,EAAZ8H,EAAc,aAAkB,gBAGrC,cAAC,IAAD,CAAcvF,KAAMJ,EAAiB2D,MAAO,CAAE8E,UAAW,UAAzD,SACG5K,EAAE,eAAgB,CAAEwC,OAAQ4E,UClFtByD,GAlEqC,SAAC,GAAmD,IAAjD3D,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAW1B,EAA0B,EAA1BA,IAA0B,IAArB2B,iBAAqB,MAAT,GAAS,EACrG,EAAsBvH,mBAAS,IAA/B,mBAAO4H,EAAP,KAAYC,EAAZ,KACA,EAAqCC,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACtB,EAAkChI,oBAAS,GAA3C,mBAAOiI,EAAP,KAAkBC,EAAlB,KACQ/H,EAAMC,cAAND,EACFkI,EAAc/H,mBAAQ,WAC1B,OAAOgI,YAAsB1C,KAC5B,CAACA,IAEEqF,EAAY,IAAIzC,IAAUZ,GAC1Ba,EAAoB,IAAID,IAAUH,GAElCiB,EAAeC,uBACnB,SAAC/I,GACKA,EAAEgJ,cAAcC,SAASC,OAC3B7B,EAAOrH,EAAEgJ,cAAc/I,MAAMkJ,QAAQ,KAAM,QAG/C,CAAC9B,IAGG+B,EAAkBL,uBAAY,WAClC1B,EAAOQ,KACN,CAACA,EAAaR,IAEjB,OACE,eAAC,KAAD,CAAO0C,MAAOpK,EAAE,qBAAsBmH,UAAWA,EAAjD,UACE,cAAC,GAAD,CACEzB,YAAa+D,EACb9J,SAAUwJ,EACV7I,MAAOmH,EACPhC,IAAKyC,EACL1F,OAAQ4E,EACRzB,WAAY3F,EAAE,aAEhB,eAAC,GAAD,WACE,cAAC,IAAD,CAAQmD,QAAQ,YAAYtC,QAASsG,EAAW9E,MAAM,OAAOiI,SAAUxC,EAAvE,SACG9H,EAAE,YAEL,cAAC,IAAD,CACEsK,SAAUxC,IAAcgD,EAAUP,YAAcO,EAAUN,GAAG,IAAMM,EAAU5B,GAAGZ,GAChFzH,QAAO,wBAAE,uBAAA4J,EAAA,6DACP1C,GAAa,GADN,kBAGCb,EAAUO,GAHX,OAILG,EAAa5H,EAAE,aAAcA,EAAE,0DAC/BmH,IALK,gDAOLU,EACE7H,EAAE,SACFA,EAAE,uFAEJ0K,QAAQC,MAAR,MAXK,yBAaL5C,GAAa,GAbR,4EAgBT1F,MAAM,OAlBR,SAoBerC,EAAZ8H,EAAc,aAAkB,oB,UCzD5BiD,GAbS,SAACC,GACvB,IAAMC,EAAqBC,eAS3B,MAAO,CAAEC,UAPa/B,sBAAW,yCAC/B,WAAOgC,GAAP,UAAAX,EAAA,sEACQY,aAAYJ,EAAoBD,EAAKI,GAD7C,2CAD+B,sDAI/B,CAACH,EAAoBD,MCOVM,GAdO,SAACN,GACrB,IAAMC,EAAqBC,eAU3B,MAAO,CAAEK,QARWnC,sBAAW,yCAC7B,WAAOgC,GAAP,gBAAAX,EAAA,sEACuBe,aAAUP,EAAoBD,EAAKI,GAD1D,OACQK,EADR,OAEEf,QAAQgB,KAAKD,GAFf,2CAD6B,sDAK7B,CAACR,EAAoBD,MCkBnBW,GAAoBzM,IAAOG,IAAV,gFA+GRuM,GAxGqC,SAAC,GAW9C,IAVL3E,EAUI,EAVJA,cACA4E,EASI,EATJA,aACAzE,EAQI,EARJA,UACA4D,EAOI,EAPJA,IACAnI,EAMI,EANJA,WACA0E,EAKI,EALJA,IACAF,EAII,EAJJA,WACAlF,EAGI,EAHJA,gBACAqF,EAEI,EAFJA,UACAtF,EACI,EADJA,QAEQlC,EAAMC,cAAND,EACAuL,EAAYD,GAAcN,GAA1BO,QACAJ,EAAcJ,GAAgBC,GAA9BG,UACFW,EAAWC,cACXC,EAAWC,eACTC,EAAYC,cAAZD,QACF5E,EAAU8E,YAAgBhF,GAE1BiF,EAAW,yCAAG,WAAOjB,GAAP,UAAAX,EAAA,sEACZc,EAAQH,GADI,OAElBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAFhC,2CAAH,sDAKXwB,EAAa,yCAAG,WAAOpB,GAAP,UAAAX,EAAA,sEACdU,EAAUC,GADI,OAEpBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAF9B,2CAAH,sDAKb1E,EAAiB8C,uBAAY,WACjC,IAAMqD,EAAyBC,YAAiBzF,GAChD,OAAIwF,EAAuBvD,GAAG,IAAMuD,EAAuBE,GAAG,MACrD,aAELF,EAAuBvD,GAAG,GACrBuD,EAAuBG,QAAQ,EAAGvE,IAAUwE,YAE9CJ,EAAuBG,QAAQ,EAAGvE,IAAUwE,cAClD,CAAC5F,IAEJ,EAA2B6F,aACzB,cAAC,GAAD,CACErH,IAAKoG,EACL5E,cAAeA,EACfC,UAAWmF,EACXjF,UAAWA,EACXvE,WAAYA,EACZyE,QAASA,EACTpF,QAASA,EACTqF,IAAKA,EACLF,WAAYA,EACZlF,gBAAiBA,EACjBqF,UAAWA,KAZRuF,EAAP,oBAeA,EAA4BD,aAC1B,cAAC,GAAD,CAAerH,IAAKwB,EAAeC,UAAWsF,EAAepF,UAAWA,KADnE4F,EAAP,oBA4BA,OACE,eAAC,IAAD,CAAM5K,eAAe,gBAAgBa,WAAW,SAAhD,UACE,eAAC,IAAD,CAAMK,cAAc,SAASL,WAAW,aAAxC,UACE,cAAC,IAAD,CAASjC,MAAOiG,EAAcuD,GAAG,GAAK,eAAiB,OAAvD,SAAgElE,MAC/DW,EAAciC,GAAG,IAAM5B,EAAQ4B,GAAG,IACjC,cAAC+D,GAAA,EAAD,CACEhH,SAAS,OACTjF,MAAM,aACN4E,SAAU,EACVtF,MAAO4M,YAAiB5F,EAAQkB,MAAMvB,IACtCkG,KAAK,OACLC,OAAO,SAlCRnG,EAAcuD,GAAG,GACtB,cAAC,IAAD,CACE3J,QAASkM,EACTzC,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAF9E,SAIGtN,EAAE,cAGL,eAAC2L,GAAD,WACE,cAAC,IAAD,CAAYxI,QAAQ,WAAWtC,QAASmM,EAAmBpG,GAAG,MAA9D,SACE,cAAC,KAAD,CAAW5F,MAAM,UAAUqB,MAAM,WAEnC,cAAC,IAAD,CACEc,QAAQ,WACRtC,QAASkM,EACTzC,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAAStM,MAAM,UAAUqB,MAAM,kB,SCrG1BoL,GAVQ,SAACC,GACtB,IAAMzC,EAAqBC,eAM3B,MAAO,CAAEyC,SAJavE,sBAAW,wBAAC,uBAAAqB,EAAA,sEAC1BmD,aAAY3C,EAAoByC,GADN,2CAE/B,CAACA,EAASzC,MC0DA4C,GAhDuC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAU9C,EAAU,EAAVA,IACzDkB,EAAYC,cAAZD,QACR,EAAqCvE,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACd7H,EAAMC,cAAND,EACR,EAAkCH,oBAAS,GAA3C,mBAAOiI,EAAP,KAAkBC,EAAlB,KACQ4F,EAAaF,GAAezC,GAA5B2C,SACFnG,EAAYuG,cACZ/B,EAAWC,eACX+B,EAAqB9B,EAAUQ,YAAiBoB,GAAYG,KAC5D3H,EAAiB0H,EAAmBpB,QAAQ,EAAGvE,IAAUwE,YACzDqB,EAAeF,EAAqBA,EAAmBG,aAAa3G,GAAWqB,WAAa,EAElG,OACE,eAAC,IAAD,CAAM3F,GAAG,MAAMd,eAAe,gBAAgBa,WAAW,SAAzD,UACE,eAAC,IAAD,CAAMK,cAAc,SAASL,WAAW,aAAxC,UACE,cAAC,IAAD,CAASjC,MAAOgN,EAAmBxD,GAAG,GAAK,eAAiB,OAA5D,SAAqElE,IACpE4H,EAAe,GACd,cAACjB,GAAA,EAAD,CAAShH,SAAS,OAAOjF,MAAM,aAAa4E,SAAU,EAAGtF,MAAO4N,EAAcf,KAAK,OAAOC,OAAO,SAGrG,cAAC,IAAD,CACE9C,SAAU0D,EAAmBxD,GAAG,IAAM1C,EACtCjH,QAAO,wBAAE,uBAAA4J,EAAA,6DACP1C,GAAa,GADN,kBAGC4F,IAHD,OAIL/F,EAAa,GAAD,OACP5H,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEwC,OAAQ,UANlE,gDASLqF,EACE7H,EAAE,SACFA,EAAE,uFAEJ0K,QAAQC,MAAR,MAbK,yBAeL5C,GAAa,GAfR,qBAiBPiE,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAjB3C,+DAFX,SAsBehL,EAAZ8H,EAAc,aAAkB,iB,mBCrC1BsG,GAnBQ,SAACC,GACtB,IAAMpD,EAAqBC,eACnBoD,EAAqBC,eAArBD,iBAcR,MAAO,CAAEE,UAbapF,sBAAW,wBAAC,+BAAAqB,EAAA,+EAEb6D,EAAiBD,EAAY,UAAW,CACvDpD,EAAmBxJ,QACnBgN,KAAOC,UAAUC,aAJW,cAExBC,EAFwB,gBAMRA,EAAGC,OANK,cAMxBC,EANwB,yBAOvBA,EAAQC,QAPe,4DASvB,GATuB,0DAW/B,CAACV,EAAYpD,EAAoBqD,MCJhCU,GAAS9P,IAAOG,IAAV,oDAkFG4P,GAnEqC,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,KAAMhD,EAAmD,EAAnDA,QAAS/J,EAA0C,EAA1CA,gBAAiBqF,EAAyB,EAAzBA,UAAWtF,EAAc,EAAdA,QACxFlC,EAAMC,cAAND,EACR,EAAkDH,oBAAS,GAA3D,mBAAOsP,EAAP,KAA0BC,EAA1B,KACQpE,EAAqBkE,EAArBlE,IAAKqE,EAAgBH,EAAhBG,YACb,EAA6DH,EAAKI,UAAY,GAAtEC,EAAR,EAAQA,UAAW1D,EAAnB,EAAmBA,aAAc5E,EAAjC,EAAiCA,cAAe6G,EAAhD,EAAgDA,SAC1C0B,EAAYC,aAAWJ,GACvBK,EAAaxD,GAAWqD,GAAaA,EAAUI,cAAc,GAC7D3D,EAAWC,eAEXoC,EAAauB,aAASJ,GAEpBhB,EAAcJ,GAAeC,GAA7BG,UAEFqB,EAAgBzG,sBAAW,wBAAC,uBAAAqB,EAAA,sEAE9B2E,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9BxC,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAClDoE,GAAqB,GALS,gDAO9B1E,QAAQC,MAAR,MAP8B,yDAS/B,CAAC6D,EAAWxC,EAAUE,EAASlB,IAqBlC,OACE,eAACgE,GAAD,WACE,eAAC,IAAD,WACE,cAAC,KAAD,CAAM/N,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,YAAYiF,SAAS,OAAO8J,GAAG,MAA1E,kBAGA,cAAC,KAAD,CAAM9O,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAjE,SACGjG,EAAE,eAGP,cAAC,GAAD,CAAe8N,SAAUA,EAAU9C,IAAKA,IACxC,eAAC,IAAD,WACE,cAAC,KAAD,CAAM/J,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,YAAYiF,SAAS,OAAO8J,GAAG,MAA1E,SACGb,EAAKc,WAER,cAAC,KAAD,CAAM/O,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAjE,SACGjG,EAAE,eAGLkM,EArCGwD,EACL,cAAC,GAAD,CACEzI,cAAeA,EACf4E,aAAcA,EACdzE,UAAW8H,EAAKc,SAChBhF,IAAKA,EACLzD,IAAK2H,EAAK3H,IACVrF,QAASA,EACTsF,UAAWA,EACXrF,gBAAiBA,IAGnB,cAAC,IAAD,CAAQkI,GAAG,MAAMhI,MAAM,OAAOiI,SAAU6E,EAAmBtO,QAASgP,EAApE,SACG7P,EAAE,qBAwBO,cAACiQ,GAAA,EAAD,CAAqB5F,GAAG,MAAMhI,MAAM,aCpFhD6N,GAAoBhR,YAAOuD,IAAPvD,CAAH,yFAkERiR,GA9C6B,SAAC,GAUtC,IATLhN,EASI,EATJA,QACA6H,EAQI,EARJA,IACA9I,EAOI,EAPJA,QACA8N,EAMI,EANJA,SACAxI,EAKI,EALJA,UACAD,EAII,EAJJA,IACA1E,EAGI,EAHJA,WACAwE,EAEI,EAFJA,WACAlF,EACI,EADJA,gBAEQnC,EAAMC,cAAND,EACFsH,EAAU8E,YAAgB4D,GAChC,EAAwCI,YAAYpF,GAA5Ca,EAAR,EAAQA,aAAc5E,EAAtB,EAAsBA,cACtB,EAA4B6F,aAC1B,cAACpD,GAAA,EAAD,CACEC,UAAW3J,EAAE,eAAgB,CAAEwC,OAAQN,IACvC0H,oBAAqB3C,EAAc4C,KAAKgC,GACxC/B,mBAAoBkG,EACpBjG,kBAAmBzC,EAAQuB,WAC3BC,kBAAmBtB,EAAUqB,WAC7BtB,IAAKA,EACL1E,WAAYA,EACZwE,WAAYA,EACZ2C,SAAU7H,EACV8H,QAAM,KAXHoG,EAAP,oBAoBA,OACE,eAACH,GAAD,CAAmBjN,WAAW,SAASpC,QANf,SAACyP,GACzBA,EAAMC,kBACNF,KAIA,UACGhJ,EADH,IAEe,oBAAZlE,GACC,cAAC,IAAD,CAAYA,QAAQ,OAAOwD,MAAM,KAAKnD,GAAG,MAAzC,SACE,cAAC,IAAD,CAAenB,MAAM,eC7CzBmO,GAAatR,YAAOuR,IAAPvR,CAAH,uDAIVwR,GAAyBxR,YAAOuD,IAAPvD,CAAH,6GAMtByR,GAAmBzR,IAAOG,IAAV,mGAEI,qBAAGC,MAAkBoB,OAAOkQ,cAkGvCC,GAtF2B,SAAC,GAAuD,IAArD3B,EAAoD,EAApDA,KAAM7H,EAA8C,EAA9CA,WAAYrF,EAAkC,EAAlCA,QAASwF,EAAyB,EAAzBA,UAAW0E,EAAc,EAAdA,QACzElM,EAAMC,cAAND,EAER,EAA0DH,oBAAS,GAAnE,mBAAOiR,EAAP,KAA8BC,EAA9B,KAEM9O,EACJiN,EAAK8B,WAAa9B,EAAK8B,UAAU9H,GAAG,GAApC,WACQgG,EAAK8B,UAAUnI,WAAWoI,oBAAeC,EAAW,CAAEC,sBAAuB,KACjF,GAEAjP,EAAUgN,EAAKc,UAAYd,EAAKc,SAASoB,cAAc5H,QAAQ,UAAW,IAC1E6H,EAAYnC,EAAKoC,KAAOpC,EAAKoC,KAAKD,UAAYrR,EAAE,eAEhDuR,EAAwBpQ,GAAyB,CACrDC,kBAAmB8N,EAAKlM,WAAWvB,QACnCJ,aAAc6N,EAAKnM,MAAMtB,UAErBU,EAAe,UAAMqP,KAAN,YAAgCD,GAC/C/B,EAAYC,aAAWP,EAAKG,aAC5BoC,EAAuC,SAAtBvC,EAAKnM,MAAMP,OAElC,OACE,eAACgO,GAAD,CAAYkB,SAAUD,EAAtB,UACE,eAACf,GAAD,WACE,cAAC,GAAD,CACExO,QAASA,EACTW,WAAYqM,EAAKrM,WACjBC,gBAAiBoM,EAAKyC,YACtB5O,MAAOmM,EAAKnM,MACZC,WAAYkM,EAAKlM,cAEjBhB,GACA,eAAC,IAAD,CAAMI,eAAe,gBAAgBa,WAAW,SAAhD,UACE,eAAC,KAAD,WAAOjD,EAAE,OAAT,OACA,cAAC,KAAD,CAAMiB,MAAI,EAAC6E,MAAO,CAAE8L,QAAS,OAAQ3O,WAAY,UAAjD,SACGiM,EAAK3H,IACJ,cAAC,GAAD,CACEpE,QAAQ,kBACR6H,IAAKkE,EAAKlE,IACVgF,SAAUd,EAAKc,SACfnN,WAAYqM,EAAKrM,WACjBX,QAASA,EACTC,gBAAiBA,EACjBqF,UAAWA,EACXD,IAAK2H,EAAK3H,IACVF,WAAYA,IAGd,cAAC,KAAD,CAAU/E,OAAQ,GAAID,MAAO,UAKrC,eAAC,IAAD,CAAMD,eAAe,gBAArB,UACE,eAAC,KAAD,WAAOpC,EAAE,QAAT,OACA,cAAC,KAAD,CAAMiB,MAAI,EAAV,SAAYoQ,OAEd,cAACQ,GAAD,CACE3C,KAAMA,EACNhN,QAASA,EACTgK,QAASA,EACT1E,UAAWA,EACXrF,gBAAiBA,OAIrB,eAACwO,GAAD,WACE,cAAC,GAAD,CACE9P,QAAS,kBAAMkQ,GAA0BD,IACzChQ,SAAUgQ,IAEXA,GACC,cAAC,GAAD,CACE9O,QAASA,EACTF,eAAgBgQ,YAAetC,EAAW,WAC1CzN,YAAW,qBAAgByN,GAC3BvN,oBAAqBA,EACrBC,QAASA,EACTC,gBAAiBA,W,UCvGvB4P,GAAY7S,IAAOG,IAAV,8MAGJ,qBAAGC,MAAkBoB,OAAO0E,QAQvB,qBAAG9F,MAAkBoB,OAAOsR,cAMtCC,GAAa/S,IAAOG,IAAV,uEA+CD6S,GA1CiB,SAAC,GAW1B,IAVL5R,EAUI,EAVJA,MACA0K,EASI,EATJA,IACA9I,EAQI,EARJA,QACA8N,EAOI,EAPJA,SACAnN,EAMI,EANJA,WACAxB,EAKI,EALJA,aACAD,EAII,EAJJA,kBACAoG,EAGI,EAHJA,UACA2K,EAEI,EAFJA,cAEI,IADJC,kBACI,SACEb,EAAwBpQ,GAAyB,CAAEC,oBAAmBC,iBACtEc,EAAe,UAAMqP,KAAN,YAAgCD,GAErD,OAAyB,IAAlBY,EACL,cAACJ,GAAD,UACGI,EACC,cAAC,GAAD,CACEhP,QAASiP,EAAa,OAAS,kBAC/BpH,IAAKA,EACLgF,SAAUA,EACV9N,QAASA,EACTW,WAAYA,EACZ2E,UAAWA,EACXD,IAAK4K,EACL9K,WAAY/G,EACZ6B,gBAAiBA,IAGnB,cAAC8P,GAAD,UACE,cAAC,KAAD,CAAU5P,MAAO,SAKvB,cAAC0P,GAAD,UACE,eAACE,GAAD,WAAaE,EAAb,UChEAJ,GAAY7S,IAAOG,IAAV,wIAKX,qBAAGC,MAAkBC,aAAaC,MAKhC6S,GAAenT,IAAOG,IAAV,uGAId,qBAAGC,MAAkBC,aAAaC,MAmCvB8S,GA9BkC,SAAC,GAAuC,IAArCvP,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYuP,EAAiB,EAAjBA,MAAOvH,EAAU,EAAVA,IACpE/D,EAAkBmJ,YAAYpF,GAA9B/D,cACAjH,EAAMC,cAAND,EACFwS,EAAmBtF,YAAiBjG,GAc1C,OACE,eAAC,GAAD,WACE,cAACoL,GAAD,UACE,cAAC,KAAD,CAAgBlP,QAAQ,WAAWC,aAAcL,EAAOM,eAAgBL,EAAYX,MAAO,GAAIC,OAAQ,OAEzG,gCAhBEkQ,EAEA,cAAC,KAAD,CAAMxR,MAAM,YAAYiF,SAAS,OAAOhF,MAAI,EAAC6O,cAAc,YAA3D,SACG9P,EAAE,aAKF,KAUH,cAAC,KAAD,CAAMiB,MAAI,EAAV,SAAYsR,WC9CdE,GAASvT,IAAOwT,KAAV,uFACD,gBAAGC,EAAH,EAAGA,OAAQrT,EAAX,EAAWA,MAAX,OAAwBqT,EAASrT,EAAMoB,OAAO0E,KAAO9F,EAAMoB,OAAOkS,gBAgB9DC,GAXiD,SAAC,GAAiC,IAA/B/E,EAA8B,EAA9BA,SACjE,OAD+F,EAApBgF,cAElE,cAACL,GAAD,CAAQE,OAAQ7E,EAAhB,SAA2BA,EAASmD,mBAG3C,cAACwB,GAAD,CAAQE,OAAQ,EAAhB,SACE,cAAC,KAAD,CAAUtQ,MAAO,QChBjB0P,GAAY7S,IAAOG,IAAV,6KAKJ,qBAAGC,MAAkBoB,OAAOC,WAEnC,qBAAGrB,MAAkBC,aAAaC,MAKhCuT,GAAY7T,YAAO8T,IAAP9T,CAAH,kEACA,qBAAG+T,QAAyB,iBAAmB,eAgB/CC,GAZyB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBACjCnT,EAAMC,cAAND,EACAoT,EAAcC,eAAdD,UAER,OACE,eAAC,GAAD,YACIA,GAAapT,EAAE,WACjB,cAAC+S,GAAD,CAAW/R,MAAM,UAAUiS,QAASE,QC5BpCG,GAAmBpU,IAAOG,IAAV,wDAQhBkU,GAAoBrU,IAAOG,IAAV,uKACZ,qBAAGC,MAAkBoB,OAAO0E,QAKnC,qBAAG9F,MAAkBC,aAAaiU,MAMhCzB,GAAY7S,IAAOG,IAAV,wEAqCAoU,GAhC8C,SAAC,GAAoB,IAAlB5Q,EAAiB,EAAjBA,WACxD6Q,EAAoB7Q,EAAaA,EAAW8Q,cAAgB,cAAC,KAAD,CAAUtR,MAAO,KAC3ErC,EAAMC,cAAND,EACF4T,EACJ,qCACE,cAAC,KAAD,UACG5T,EACC,mIAGJ,cAAC,KAAD,CAAM6T,GAAG,OAAT,SACG7T,EAAE,sGAEL,cAAC,KAAD,UAAOA,EAAE,8EAGb,EAA+C8T,aAAWF,EAAgB,CACxEG,UAAW,UACXC,cAAe,CAAC,GAAI,MAFdC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAK5B,OACE,eAAC,GAAD,WACE,cAACZ,GAAD,UAAoBG,IACpB,cAACJ,GAAD,CAAkBc,IAAKH,EAAvB,SACE,cAAC,IAAD,CAAUjT,MAAM,iBAEjBmT,GAAkBD,MCnDnBZ,GAAmBpU,IAAOG,IAAV,wDAQhBgV,GAAmBnV,IAAOG,IAAV,kLAMlB,qBAAGC,MAAkBC,aAAaiU,MAMhCzB,GAAY7S,IAAOG,IAAV,wEA+BAiV,GA1B4C,SAAC,GAAmB,IAAjBtD,EAAgB,EAAhBA,UACtDuD,EACJvD,GAAaA,EAAU9H,GAAG,GAA1B,WACMsL,OAAOxD,GAAWC,oBAAeC,EAAW,CAAEC,sBAAuB,KAEzE,cAAC,KAAD,CAAU9O,MAAO,KAEbrC,EAAMC,cAAND,EACR,EAA+C8T,aAC7C9T,EAAE,+DACF,CAAE+T,UAAW,UAAWC,cAAe,CAAC,GAAI,MAFtCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAK5B,OACE,eAAC,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,UAAOE,MAET,cAAC,GAAD,CAAkBH,IAAKH,EAAvB,SACE,cAAC,IAAD,CAAUjT,MAAM,iBAEjBmT,GAAkBD,MClDZO,GAAkBvV,IAAOG,IAAV,0XAEN,qBAAGC,MAAkBoB,OAAOqE,SAM9C,qBAAGzF,MAAkBC,aAAaC,MAOlC,qBAAGF,MAAkBC,aAAamV,MAQzBC,GAAezV,IAAOG,IAAV,gDAIZuV,GAAgB1V,IAAOG,IAAV,2GC4DXwO,GApEoD,SAAC,GAAsC,IAApC7C,EAAmC,EAAnCA,IAAKsE,EAA8B,EAA9BA,SAAUwD,EAAoB,EAApBA,cACnF,EAAqCnL,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAChBgN,EAAoB,IAAIxM,IAAUiH,EAASxB,UAC3CtG,EAAYuG,cACdD,EAAWG,KACXC,EAAe,EACf5H,EAAiBwM,EAAgBhF,EAASmD,iBAAmB,cAAC,KAAD,CAAU5O,MAAO,KAG7EwS,EAAkBC,WAErB5G,GADAJ,EAAWpB,YAAiBmI,IACJ1G,aAAa3G,GAAWqB,WAChDvC,EAAiBwH,EAASlB,QAAQ,EAAGvE,IAAUwE,aAGjD,MAAkChN,oBAAS,GAA3C,mBAAOiI,EAAP,KAAkBC,EAAlB,KACQ4F,EAAaF,GAAezC,GAA5B2C,SACA3N,EAAMC,cAAND,EACFgM,EAAWC,eACTC,EAAYC,cAAZD,QAER,OACE,eAACuI,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAM1T,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,YAAYiF,SAAS,OAAO8J,GAAG,MAA1E,kBAGA,cAAC,KAAD,CAAM9O,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAjE,SACGjG,EAAE,eAGP,eAAC4U,GAAD,WACE,gCACE,cAAC,IAAD,UAAUtO,IACT4H,EAAe,GACd,cAACjB,GAAA,EAAD,CAAShH,SAAS,OAAOjF,MAAM,aAAa4E,SAAU,EAAGtF,MAAO4N,EAAcf,KAAK,OAAOC,OAAO,SAGrG,cAAC,IAAD,CACE9C,SAAUwD,EAAStD,GAAG,IAAM1C,IAAcgL,EAC1CjS,QAAO,wBAAE,uBAAA4J,EAAA,6DACP1C,GAAa,GADN,kBAGC4F,IAHD,OAIL/F,EAAa,GAAD,OACP5H,EAAE,aADK,KAEVA,EAAE,wDAAyD,CAAEwC,OAAQ,UANlE,gDASLqF,EACE7H,EAAE,SACFA,EAAE,uFAEJ0K,QAAQC,MAAR,MAbK,yBAeL5C,GAAa,GAfR,qBAiBPiE,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAjB3C,+DAmBTxH,GAAG,MArBL,SAuBexD,EAAZ8H,EAAc,aAAkB,oBCzDrC6D,GAAoBzM,IAAOG,IAAV,gDAiNR0V,GAvM6C,SAAC,GAWtD,IAVL/J,EAUI,EAVJA,IACAzD,EASI,EATJA,IACA1E,EAQI,EARJA,WACAmN,EAOI,EAPJA,SACA9N,EAMI,EANJA,QACAmN,EAKI,EALJA,YACArM,EAII,EAJJA,WACAD,EAGI,EAHJA,MACA+P,EAEI,EAFJA,cACAzL,EACI,EADJA,WAEQrH,EAAMC,cAAND,EACAkM,EAAYC,cAAZD,QACR,EAAkDrM,oBAAS,GAA3D,mBAAOsP,EAAP,KAA0BC,EAA1B,KACA,EAAmDgB,YAAYpF,GAAvDuE,EAAR,EAAQA,UAAW1D,EAAnB,EAAmBA,aAAc5E,EAAjC,EAAiCA,cACzBsE,EAAYD,GAAcN,GAA1BO,QACAJ,EAAcJ,GAAgBC,GAA9BG,UACFW,EAAWC,cACXzE,EAAU8E,YAAgB4D,GAC1BxI,EAAYuG,cAEZ2B,EAAaxD,GAAWqD,GAAaA,EAAUI,cAAc,GAE7DH,EAAYC,aAAWJ,GACvBkC,EAAwBpQ,GAAyB,CACrDC,kBAAmB4B,EAAWvB,QAC9BJ,aAAc0B,EAAMtB,UAEhBU,EAAe,UAAMqP,KAAN,YAAgCD,GAE/ClF,EAAW,yCAAG,WAAOjB,GAAP,UAAAX,EAAA,sEACZc,EAAQH,GADI,OAElBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAFhC,2CAAH,sDAKXwB,EAAa,yCAAG,WAAOpB,GAAP,UAAAX,EAAA,sEACdU,EAAUC,GADI,OAEpBY,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAF9B,2CAAH,sDAKb1E,EAAiB8C,uBAAY,WACjC,IAAMqD,EAAyBC,YAAiBzF,GAChD,OAAIwF,EAAuBvD,GAAG,IAAMuD,EAAuBE,GAAG,MACrDF,EAAuBG,QAAQ,GAAIvE,YAAUwE,YAElDJ,EAAuBvD,GAAG,IAAMuD,EAAuBE,GAAG,MACrDxE,YAAsBlB,GAAegK,iBAEvCxE,EAAuBG,QAAQ,EAAGvE,YAAUwE,cAClD,CAAC5F,IAEJ,EAA2B6F,aACzB,cAAC,GAAD,CACErH,IAAKoG,EACLvE,QAASA,EACTpF,QAASA,EACTqF,IAAKA,EACLF,WAAYA,EACZJ,cAAeA,EACfC,UAAWmF,EACXjF,UAAW4I,EACXnN,WAAYA,EACZV,gBAAiBA,EACjBqF,UAAWA,KAZRuF,EAAP,oBAeA,EAA4BD,aAC1B,cAAC,GAAD,CAAerH,IAAKwB,EAAeC,UAAWsF,EAAepF,UAAW4I,KADnEhD,EAAP,oBAGMqB,EAAauB,aAASJ,GACtBxD,EAAWC,eACTuC,EAAcJ,GAAeC,GAA7BG,UAEFqB,EAAgBzG,sBAAW,wBAAC,uBAAAqB,EAAA,sEAE9B2E,GAAqB,GAFS,SAGxBZ,IAHwB,OAI9BxC,EAASM,aAAuB,CAAEJ,UAASK,KAAM,CAACvB,MAElDoE,GAAqB,GANS,gDAQ9B1E,QAAQC,MAAR,MAR8B,yDAU/B,CAAC6D,EAAWxC,EAAUE,EAASlB,IAElC,OAAKkB,EAeDwD,EACEzI,EAAciC,GAAG,GAEjB,eAACuL,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAM1T,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,YAAYiF,SAAS,OAAO8J,GAAG,MAA1E,SACGC,IAEH,cAAC,KAAD,CAAM/O,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAjE,SACGjG,EAAE,eAGP,eAAC4U,GAAD,WACE,gCACE,cAAC,IAAD,UAAUtO,MACTW,EAAciC,GAAG,IAAM5B,EAAQ4B,GAAG,IACjC,cAAC+D,GAAA,EAAD,CACEhH,SAAS,OACTjF,MAAM,aACN4E,SAAU,EACVtF,MAAO4M,YAAiB5F,EAAQkB,MAAMvB,IACtCkG,KAAK,OACLC,OAAO,SAIb,eAAC,GAAD,WACE,cAAC,IAAD,CAAYjK,QAAQ,YAAYtC,QAASmM,EAAmBpG,GAAG,MAA/D,SACE,cAAC,KAAD,CAAW5F,MAAM,UAAUqB,MAAM,WAEnC,cAAC,IAAD,CACEc,QAAQ,YACRtC,QAASkM,EACTzC,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAH9E,SAKE,cAAC,IAAD,CAAStM,MAAM,UAAUqB,MAAM,oBASzC,eAACoS,GAAD,WACE,eAACE,GAAD,WACE,cAAC,KAAD,CAAM1T,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAO8J,GAAG,MAA3E,SACG/P,EAAE,SAASoR,gBAEd,cAAC,KAAD,CAAMnQ,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,YAAYiF,SAAS,OAAhE,SACG+J,OAGL,cAAC4E,GAAD,UACE,cAAC,IAAD,CACEvS,MAAM,OACNxB,QAASkM,EACT5J,QAAQ,YACRmH,SAAU,CAAC,UAAW,YAAY+C,MAAK,SAACC,GAAD,OAAUxB,EAASyB,SAASC,SAASF,MAJ9E,SAMGtN,EAAE,mBAOR8S,EAgBH,eAAC2B,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAM1T,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAjE,SACGjG,EAAE,mBAGP,cAAC4U,GAAD,UACE,cAAC,IAAD,CAAQvS,MAAM,OAAOiI,SAAU6E,EAAmBtO,QAASgP,EAAe1M,QAAQ,YAAlF,SACGnD,EAAE,iBAtBP,eAACyU,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAM1T,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAjE,SACGjG,EAAE,qBAGP,cAAC4U,GAAD,UACE,cAAC,KAAD,CAAUvS,MAAO,IAAK2S,aAAc,GAAIC,UAAW,UAzFvD,eAACR,GAAD,WACE,cAACE,GAAD,UACE,cAAC,KAAD,CAAM1T,MAAI,EAAC6O,cAAc,YAAY9O,MAAM,aAAaiF,SAAS,OAAjE,SACGjG,EAAE,qBAGP,cAAC4U,GAAD,UACE,cAAC3E,GAAA,EAAD,CAAqB5N,MAAM,eCzG/B6S,GAAkBC,YAAH,wGASfC,GAAoBD,YAAH,wGASjBpD,GAAY7S,IAAOG,IAAV,oPACA,qBAAGyB,SAEVuU,YADI,0EAEAH,IAEJG,YAJI,0EAKAD,OAGI,qBAAG9V,MAAkBoB,OAAO4U,cAMxC,qBAAGhW,MAAkBC,aAAaiU,MAMhC7R,GAAqBzC,YAAO0C,IAAP1C,CAAH,mDAIlBqW,GAAiBrW,IAAOG,IAAV,4KACT,qBAAGC,MAAkBoB,OAAO0E,QAKnC,qBAAG9F,MAAkBC,aAAaC,MAKhCgW,GAAgBtW,IAAOG,IAAV,oRAKf,qBAAGC,MAAkBC,aAAaC,MAgBhCiV,GAAkBvV,IAAOG,IAAV,sLAIjB,qBAAGC,MAAkBC,aAAaC,MAQhCiW,GAAgBvW,IAAOG,IAAV,mDAIbqW,GAAiBxW,IAAOG,IAAV,qFAGhB,qBAAGC,MAAkBC,aAAaiU,MAKhCmC,GAAezW,IAAOG,IAAV,+HAoEHuW,GA7DgD,SAAC,GAOzD,IANLC,EAMI,EANJA,QACAtO,EAKI,EALJA,IACA1E,EAII,EAJJA,WACAmO,EAGI,EAHJA,UACA8B,EAEI,EAFJA,cACAhS,EACI,EADJA,SAEMoO,EAAO2G,EAEL7V,EAAMC,cAAND,EACF0R,EAA+B,OAApBxC,EAAKrM,WACdG,EAA4BkM,EAA5BlM,WAAYD,EAAgBmM,EAAhBnM,MAAOuO,EAASpC,EAAToC,KACrBpP,EAAUgN,EAAKc,UAAYd,EAAKc,SAASoB,cAAc5H,QAAQ,UAAW,IAC1E+H,EAAwBpQ,GAAyB,CACrDC,kBAAmB4B,EAAWvB,QAC9BJ,aAAc0B,EAAMtB,UAEhB+N,EAAYC,aAAWP,EAAKG,aAC5ByG,EAAMhE,YAAetC,EAAW,WAChC9D,EAAI,qBAAiB8D,GAE3B,OACE,eAAC,GAAD,CAAW1O,SAAUA,EAArB,UACE,eAAC2U,GAAD,WACG/D,GACC,cAAC6D,GAAD,UACE,cAAC,GAAD,CAAoBhT,KAAI,eAAUgP,GAAlC,SACGvR,EAAE,eAAgB,CAAEwC,OAAQN,QAInC,cAAC,GAAD,CAAoBK,KAAMuT,EAA1B,SAAgC9V,EAAE,mBAClC,cAAC,GAAD,CAAoBuC,KAAMmJ,EAA1B,SAAiC1L,EAAE,mBACnC,eAACwV,GAAD,WACGtG,EAAKyC,YAAc,cAAC,KAAD,IAAmB,cAAC,KAAD,IACtCL,EAAO,cAAC,KAAD,IAAc,WAG1B,eAACoE,GAAD,WACE,eAACC,GAAD,WACE,cAAC,KAAD,UAAO3V,EAAE,SACT,cAAC,GAAD,eAASuH,OAEX,eAACoO,GAAD,WACE,cAAC,KAAD,UAAO3V,EAAE,gBACT,cAAC,GAAD,eAAgB6C,OAElB,eAAC8S,GAAD,WACE,cAAC,KAAD,UAAO3V,EAAE,eACT,cAAC,GAAD,eAAegR,UAGnB,eAAC,GAAD,WACE,cAAC,GAAD,2BAAmB9B,GAAnB,IAAyB4D,cAAeA,KACxC,cAACiD,GAAD,2BAAkB7G,GAAlB,IAAwB4D,cAAeA,EAAe5Q,QAASA,EAASmF,WAAYE,EAAIjH,gBCxL1F0V,GAAQ9W,IAAOG,IAAV,sFAEA,qBAAGC,MAAkBoB,OAAOsR,cAIjCiE,GAAmB/W,IAAOG,IAAV,6FAmBP6W,GAT+B,SAAC,GAA8B,IAAD,IAA3B3D,aAA2B,MAAnB,GAAmB,EAAflO,EAAe,EAAfA,SAC3D,OACE,gCACGkO,GAAS,cAACyD,GAAD,UAAQzD,IAClB,cAAC0D,GAAD,UAAmB5R,QCMZ8R,GAAwC,CACnD,CACEC,GAAI,EACJC,KAAM,OACNC,UAAU,EACV/D,MAAO,IAET,CACE6D,GAAI,EACJC,KAAM,SACNC,UAAU,EACV/D,MAAO,UAET,CACE6D,GAAI,EACJC,KAAM,MACNC,UAAU,EACV/D,MAAO,OAET,CACE6D,GAAI,EACJC,KAAM,UACNC,UAAU,EACV/D,MAAO,KAIEgE,GAAyC,CACpD,CACEH,GAAI,EACJC,KAAM,OACNC,UAAU,EACV/D,MAAO,IAET,CACE6D,GAAI,EACJC,KAAM,SACNC,UAAU,EACV/D,MAAO,UAET,CACE6D,GAAI,EACJC,KAAM,MACNC,UAAU,EACV/D,MAAO,OAET,CACE6D,GAAI,EACJC,KAAM,YACNC,UAAU,EACV/D,MAAO,aAET,CACE6D,GAAI,EACJC,KAAM,aACNC,UAAU,EACV/D,MAAO,cAET,CACE6D,GAAI,EACJC,KAAM,UACNC,UAAU,EACV/D,MAAO,KC5DLiE,GAAQ,CACZjP,IAAK2K,GACLhD,KAAMoD,GACNK,OAAQE,GACRgD,QAAS3C,GACTrQ,WAAY4Q,GACZzC,UAAWsD,IAGPmC,GAAYvX,IAAOG,IAAV,+KAOX,qBAAGC,MAAkBC,aAAamV,MAKhCgC,GAAWxX,IAAOyX,GAAV,mFAEe,qBAAGrX,MAAkBoB,OAAOkQ,cAGnDgG,GAAmB1X,IAAO2X,GAAV,4DAIhBC,GAAgB5X,IAAO2X,GAAV,6EAKbE,GAAiB7X,IAAO2X,GAAV,oDAwHLG,GApH2C,SAACtT,GACzD,IAAQmS,EAA2BnS,EAA3BmS,QAAS/C,EAAkBpP,EAAlBoP,cACXmE,IAAoB7G,YAAYyF,EAAQ7K,KAAK/D,cAAc4B,WACjE,EAAsDhJ,mBAASoX,GAA/D,mBAAOC,EAAP,KAA4BC,EAA5B,KACMC,EAAoBC,aAAkBH,EAAqB,KACzDlX,EAAMC,cAAND,EAEFsX,EAAoB,WACxBH,GAAwBD,IAG1BK,qBAAU,WACRJ,EAAuBF,KACtB,CAACA,IAEJ,MAAgC5D,eAAxBD,EAAR,EAAQA,UAAWoE,EAAnB,EAAmBA,SAEbC,GAAmBrE,EACnBsE,EAAcD,EAAkBtB,GAAqBI,GACrDoB,EAAcD,EAAY/S,KAAI,SAACiT,GAAD,OAAYA,EAAOvB,QAmFvD,OACE,qCAjFKmB,EA+CH,eAACd,GAAD,CAAU7V,QAASyW,EAAnB,UACE,+BACE,6BACE,cAACP,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,eAAUrT,EAAMwL,aAItB,+BACE,cAAC0H,GAAD,UACE,cAAC,GAAD,CAAYrE,MAAOvS,EAAE,UAArB,SACE,cAAC,GAAD,2BAAY0D,EAAMiP,QAAlB,IAA0BG,cAAeA,SAG7C,cAACgE,GAAD,UACE,cAAC,GAAD,CAAYvE,MAAOvS,EAAE,OAArB,SACE,cAAC,GAAD,2BAAS0D,EAAM6D,KAAf,IAAoB6K,YAAU,eAKtC,6BACE,cAACqE,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAAStD,mBAAoB+D,aAtEnC,cAACR,GAAD,CAAU7V,QAASyW,EAAnB,SACGO,OAAOC,KAAKpU,GAAOiB,KAAI,SAACoT,GACvB,IAAMC,EAAcL,EAAYM,QAAQF,GACxC,IAAqB,IAAjBC,EACF,OAAO,KAGT,OAAQD,GACN,IAAK,UACH,OACE,6BACE,cAACtB,GAAD,UACE,cAAC,GAAD,UACE,cAAC,GAAD,CAAStD,mBAAoB+D,SAH1Ba,GAQb,IAAK,MACH,OACE,6BACE,cAACtB,GAAD,UACE,cAAC,GAAD,CAAYlE,MAAOvS,EAAE,OAArB,SACE,cAAC,GAAD,2BAAS0D,EAAM6D,KAAf,IAAoB6K,WAAYqF,UAH7BM,GAQb,QACE,OACE,6BACE,cAACtB,GAAD,UACE,cAAC,GAAD,CAAYlE,MAAOvS,EAAE0X,EAAYM,GAAazF,OAA9C,SACGhO,IAAM2T,cAAc1B,GAAMuB,GAA1B,2BAAqCrU,EAAMqU,IAA3C,IAAiDjF,wBAH/CiF,SAmDpBX,GACC,6BACE,oBAAIe,QAAS,EAAb,SACE,cAAC,GAAD,2BAAiBzU,GAAjB,IAAwB5C,SAAUoW,aCpKxCnF,GAAY7S,IAAOG,IAAV,+HACH,qBAAGC,MAAkB8Y,KAAKC,cAEtB,qBAAG/Y,MAAkB8Y,KAAK9C,cAKpCgD,GAAepZ,IAAOG,IAAV,qIASZkZ,GAAcrZ,IAAOsZ,MAAV,oKASXC,GAAYvZ,IAAOwZ,MAAV,qHASTC,GAAiBzZ,IAAOG,IAAV,qDAIduZ,GAAwB1Z,IAAOG,IAAV,yHA2CZwZ,GApC0B,SAACnV,GACxC,IAAMoV,EAAiBC,iBAAuB,MACtC/Y,EAAMC,cAAND,EACAgZ,EAAiCtV,EAAjCsV,KAAMC,EAA2BvV,EAA3BuV,QAASnG,EAAkBpP,EAAlBoP,cAEfoG,EAASC,aAASF,EAASD,EAAM,CAAE1C,UAAU,EAAM8C,WAAY,SAA/DF,KAQR,OACE,cAAC,GAAD,CAAW9C,GAAG,cAAd,SACE,eAACuC,GAAD,WACE,cAACL,GAAD,CAAclE,IAAK0E,EAAnB,SACE,cAACP,GAAD,UACE,cAACE,GAAD,UACGS,EAAKvU,KAAI,SAAC0U,GACT,OAAO,wBAAC,GAAD,2BAASA,EAAIC,UAAb,IAAuBxG,cAAeA,EAAeiF,IAAG,oBAAesB,EAAIjD,gBAK1F,cAACwC,GAAD,UACE,eAAC,IAAD,CAAQzV,QAAQ,OAAOtC,QAnBX,WAClBiY,EAAeS,QAAQC,eAAe,CACpCC,SAAU,YAiBN,UACGzZ,EAAE,UACH,cAAC,IAAD,CAAegB,MAAM,uBCzD3B0Y,GAAmBxa,IAAOG,IAAV,0TAUlB,qBAAGC,MAAkBC,aAAaC,MAkBhCma,IAVgBza,IAAOG,IAAV,oIAKfkG,MAKiBrG,IAAOG,IAAV,mEACZkG,OAKAqU,GAAkB1a,IAAOG,IAAV,gKAMjB,qBAAGC,MAAkBC,aAAaC,MA2BhCqa,IArBe3a,IAAOG,IAAV,qSAWd,qBAAGC,MAAkBC,aAAaC,MAUlBN,YAAO4a,IAAP5a,CAAH,iGAOX6a,GAAgB,SAACC,EAAyBC,GAC9C,OAAID,GAAkBC,GACZD,EAAiBC,GAAchJ,eAAe,QAAS,CAAEE,sBAAuB,IAEtF6I,EACKA,EAAe/I,eAAe,QAAS,CAAEE,sBAAuB,IAElE,MAwWM+I,GArWS,WACtB,IAAQC,EAASC,cAATD,KACA5M,EAAaxB,cAAbwB,SACAvN,EAAMC,cAAND,EACR,EAA0Cqa,cAA5BC,EAAd,EAAQtB,KAAeuB,EAAvB,EAAuBA,eACjB/S,EAAYuG,cAClB,EAA0BlO,mBAAS,IAAnC,mBAAO2a,EAAP,KAAcC,EAAd,KACA,EAAgCC,cAAhC,mBAAOC,EAAP,KACQzO,GADR,KACoBC,cAAZD,SACR,EAAoCrM,mBAAS,OAA7C,mBAAO+a,EAAP,KACA,GADA,KACwCC,eAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eACfC,EAAoBjC,iBAAO,GAE3BkC,EAAa1N,EAASC,SAAS,YAC/B0N,EAAa3N,EAASC,SAAS,WAC/BkE,GAAYwJ,IAAeD,EAEjCE,YAAyBF,GAIzB,IAAMnI,GAAiB5G,KAAcA,GAAWqO,EAEhD,EAAoCa,YAAsB1J,GAA1D,mBAAO2J,EAAP,KAEMC,GAFN,KAEoBhB,EAAQiB,QAAO,SAACrM,GAAD,OAAuB,IAAbA,EAAKlE,KAAiC,OAApBkE,EAAKrM,aAAwB2Y,YAActM,EAAKlE,SACzGyQ,GAAgBnB,EAAQiB,QAAO,SAACrM,GAAD,OAAuB,IAAbA,EAAKlE,KAAiC,OAApBkE,EAAKrM,aAAwB2Y,YAActM,EAAKlE,QAC3G0Q,GAAgBpB,EAAQiB,QAAO,SAACrM,GAAD,OAAUsM,YAActM,EAAKlE,QAE5D2Q,GAAkBL,EAAYC,QAClC,SAACrM,GAAD,OAAUA,EAAKI,UAAY,IAAIjH,IAAU6G,EAAKI,SAASrI,eAAe0I,cAAc,MAGhFiM,GAAsBH,GAAcF,QACxC,SAACrM,GAAD,OAAUA,EAAKI,UAAY,IAAIjH,IAAU6G,EAAKI,SAASrI,eAAe0I,cAAc,MAGhFkM,GAAsBH,GAAcH,QACxC,SAACrM,GAAD,OAAUA,EAAKI,UAAY,IAAIjH,IAAU6G,EAAKI,SAASrI,eAAe0I,cAAc,MAGhFmM,GAAY1S,uBAChB,SAAC2S,GACC,IAAIC,EAA+CD,EAAepX,KAAI,SAACuK,GACrE,IAAKA,EAAK+M,sBAAwB/M,EAAKgN,oBACrC,OAAOhN,EAET,IAAMiN,EAAiB,IAAI9T,IAAU6G,EAAK+M,qBAAqBzT,MAAM0G,EAAKgN,qBAC1E,EAAyCxK,EACrC0K,YAAW,IAAI/T,IAAU6G,EAAKmN,YAAa7U,EAAW2U,EAAgBjN,EAAKG,YAAYiN,IAAQC,UAC/F,CAAEvC,eAAgB,EAAGC,aAAc,GAF/BD,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,aAIxB,OAAO,2BAAK/K,GAAZ,IAAkB3H,IAAKyS,EAAgBC,eAAcjJ,UAAWmL,OAGlE,GAAI3B,EAAO,CACT,IAAMgC,EAAiBC,YAASjC,EAAM7G,eACtCqI,EAAwBA,EAAsBT,QAAO,SAACrM,GACpD,OAAOuN,YAASvN,EAAKc,SAAS2D,eAAenG,SAASgP,MAG1D,OAAOR,IAET,CAACxU,EAAWgT,EAAO9I,IAOrB,GAAwD7R,mBAlF1B,IAkF9B,qBAAO6c,GAAP,MAA6BC,GAA7B,MAEMC,GAAsBzc,mBAAQ,WAClC,IAAI0c,EAAc,GAmClB,OAVInL,IACFmL,EAA2Bf,GAAbT,EAAuBM,GAA6BL,IAEhEJ,IACF2B,EAA2Bf,GAAbT,EAAuBO,GAAiCH,KAEpER,IACF4B,EAA2Bf,GAAbT,EAAuBQ,GAAiCH,KA9BtD,SAACoB,GACjB,OAAQlC,GACN,IAAK,MACH,OAAOmC,kBAAQD,GAAO,SAAC5N,GAAD,OAA+BA,EAAK3H,IAAM2H,EAAK+K,eAAc,QACrF,IAAK,aACH,OAAO8C,kBACLD,GACA,SAAC5N,GAAD,OAAgCA,EAAKrM,WAAa2R,OAAOtF,EAAKrM,WAAWma,MAAM,GAAI,IAAM,IACzF,QAEJ,IAAK,SACH,OAAOD,kBACLD,GACA,SAAC5N,GAAD,OAAgCA,EAAKI,SAAWkF,OAAOtF,EAAKI,SAASxB,UAAY,IACjF,QAEJ,IAAK,YACH,OAAOiP,kBAAQD,GAAO,SAAC5N,GAAD,OAA+BsF,OAAOtF,EAAK8B,aAAY,QAC/E,QACE,OAAO8L,GAcNG,CAAUJ,GAAaG,MAAM,EAAGN,MACtC,CACD9B,EACAU,EACAQ,GACAL,GACAC,GACAhK,EACAwJ,EACAD,EACAY,GACAD,GACAP,EACAM,GACAe,KAGF1B,EAAkBzB,QAAUqD,GAAoBlY,OAEhD6S,qBAAU,WACJwD,GACF4B,IAAwB,SAACO,GACvB,OAAIA,GAAyBlC,EAAkBzB,QACtC2D,EA/Ie,GAiJjBA,OAGV,CAACnC,IAEJ,IAAMoC,GAAUP,GAAoBjY,KAAI,SAACuK,GACvC,IAAQnM,EAAsBmM,EAAtBnM,MAAOC,EAAekM,EAAflM,WACT3B,EAAe0B,EAAMtB,QACrBL,EAAoB4B,EAAWvB,QAC/BS,EAAUgN,EAAKc,UAAYd,EAAKc,SAASzM,MAAM,KAAK,GAAG6N,cAAc5H,QAAQ,UAAW,IAiC9F,MA/BsB,CACpBjC,IAAK,CACHjH,MAAOyZ,GAAc7K,EAAK3H,IAAK2H,EAAK+K,cACpCjP,IAAKkE,EAAKlE,IACVnI,WAAYqM,EAAKrM,WACjBX,UACA8N,SAAUd,EAAKc,SACf3O,eACAD,oBACAoG,YACA2K,cAAejD,EAAK3H,KAEtB2H,KAAM,CACJqD,MAAOrQ,EACP8I,IAAKkE,EAAKlE,IACVjI,MAAOmM,EAAKnM,MACZC,WAAYkM,EAAKlM,YAEnB2P,OAAQ,CACN7E,SAAUZ,YAAiB,IAAI7E,IAAU6G,EAAKI,SAASxB,WACvD9C,IAAKkE,EAAKlE,KAEZgG,UAAW,CACTA,UAAW9B,EAAK8B,WAElBnO,WAAY,CACVA,WAAYqM,EAAKrM,YAEnBgT,QAAS3G,MAkFb,OACE,qCACE,eAACkO,EAAA,EAAD,WACE,cAAC,IAAD,CAASC,GAAG,KAAK1W,MAAM,MAAM3F,MAAM,OACjC8E,MAAO,CACL8L,QAAS,OACTxP,eAAgB,SAChB6D,SAAU,UACVqX,WAAY,UACZC,WAAY,SACZvI,aAAc,QAPlB,SASGhV,EAAE,WAEL,cAAC,IAAD,CAAS2G,MAAM,KACbb,MAAO,CACL9E,MAAO,QACPwc,QAAS,IACTvX,SAAU,UACVqX,WAAY,UACZG,UAAW,UANf,SASGzd,EAAE,yDAWP,eAAC0d,EAAA,EAAD,WACE,cAAChE,GAAD,CAAkB5T,MAAO,CAAC8L,QAAS,OAAQxP,eAAgB,UAA3D,SAcE,cAACwX,GAAD,UA6BE,cAACD,GAAD,UAEE,cAAC,EAAD,CAAaha,SA5QC,SAAC2Q,GACzBmK,EAASnK,EAAM/P,OAAOD,QA2Q8Bqd,QAAS,cAAC,KAAD,CAAY3c,MAAM,YAAcpB,YAAY,kCAC7FkG,MAAO,CACLwP,WAAY,OACZsI,QAAS,iBACT5c,MAAO,mBAhKD,WACpB,GAAI2Z,IAAakD,IAASC,OAASX,GAAQzY,OAAQ,CACjD,IAEMuU,EAFe1C,GAEQ5R,KAAI,SAACiT,GAAD,MAAa,CAC5CxB,GAAIwB,EAAOxB,GACXC,KAAMuB,EAAOvB,KACb9D,MAAOqF,EAAOrF,MACdwL,KAAM,SAACtT,EAAsBuT,GAC3B,OAAQpG,EAAOvB,MACb,IAAK,OACH,OAAO2H,EAAE5H,GAAK3L,EAAE2L,GAClB,IAAK,MACH,OAAI3L,EAAE6O,SAAS/R,IAAIjH,OAAS0d,EAAE1E,SAAS/R,IAAIjH,MAClCkU,OAAO/J,EAAE6O,SAAS/R,IAAIjH,OAASkU,OAAOwJ,EAAE1E,SAAS/R,IAAIjH,OAGvD,EACT,IAAK,SACH,OAAOmK,EAAE6O,SAAS3G,OAAO7E,SAAWkQ,EAAE1E,SAAS3G,OAAO7E,SACxD,QACE,OAAO,IAGbwI,SAAUsB,EAAOtB,aAGnB,OAAO,cAAC,GAAD,CAAO0C,KAAMmE,GAASlE,QAASA,EAASnG,cAAeA,IAGhE,OACE,eAACrQ,EAAA,EAAD,WACE,cAAC,IAAD,CAAOwb,OAAK,EAAC9D,KAAI,UAAKA,GAAtB,SACGyC,GAAoBjY,KAAI,SAACuK,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACN7H,WAAY0S,GAAc7K,EAAK3H,IAAK2H,EAAK+K,cACzCzS,UAAWA,EACX0E,QAASA,EACTlK,SAAS,GALJkN,EAAKlE,UAShB,cAAC,IAAD,CAAOiT,OAAK,EAAC9D,KAAI,UAAKA,EAAL,YAAjB,SACGyC,GAAoBjY,KAAI,SAACuK,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACN7H,WAAY0S,GAAc7K,EAAK3H,IAAK2H,EAAK+K,cACzCzS,UAAWA,EACX0E,QAASA,EACTlK,SAAO,GALFkN,EAAKlE,UAShB,cAAC,IAAD,CAAOiT,OAAK,EAAC9D,KAAI,UAAKA,EAAL,aAAjB,SACGyC,GAAoBjY,KAAI,SAACuK,GAAD,OACvB,cAAC,GAAD,CAEEA,KAAMA,EACN7H,WAAY0S,GAAc7K,EAAK3H,IAAK2H,EAAK+K,cACzCzS,UAAWA,EACX0E,QAASA,EACTlK,SAAO,GALFkN,EAAKlE,aA2GfkT,GACAhS,IAAYqO,GAAkBc,GAC7B,cAAC,IAAD,CAAMjZ,eAAe,SAArB,SACE,cAAC,EAAD,MAGJ,qBAAKgS,IAAK0G,IACV,cAACjB,GAAD,CAAasE,IAAI,gCAAgCC,IAAI,uBAAuB/b,MAAO,IAAKC,OAAQ","file":"static/js/10.987a11af.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\r\nimport { Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport debounce from 'lodash/debounce'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 12px;\r\n  margin-left: auto;\r\n  width: 390px;\r\n  height: 48px;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    display: block;\r\n  }\r\n`\r\n\r\ninterface Props {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\r\n  const [searchText, setSearchText] = useState('')\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const debouncedOnChange = useMemo(\r\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\r\n    [onChangeCallback],\r\n  )\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchText(e.target.value)\r\n    debouncedOnChange(e)\r\n  }\r\n\r\n  return (\r\n    <InputWrapper>\r\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\r\n    </InputWrapper>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import styled from 'styled-components'\r\n\r\nconst Loading = styled.div`\r\n  border: 8px solid #f3f3f3;\r\n  border-radius: 50%;\r\n  border-top: 8px solid #ddd;\r\n  border-bottom: 8px solid #ddd;\r\n  width: 20px;\r\n  height: 20px;\r\n  -webkit-animation: spin 2s linear infinite;\r\n  animation: spin 2s linear infinite;\r\n  @-webkit-keyframes spin {\r\n    0% {\r\n      -webkit-transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={onClick}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getLiquidityUrlPathParts = ({\r\n  quoteTokenAddress,\r\n  tokenAddress,\r\n}: {\r\n  quoteTokenAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  const wBnbAddress = tokens.wbnb.address\r\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\r\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {multiplier ? (\r\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          ) : (\r\n            <Skeleton ml=\"4px\" width={42} height={28} />\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\r\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </AnnualRoiContainer>\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {pendingTx ? t('Harvesting') : t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(lpContract, 'approve', [\r\n        masterChefContract.address,\r\n        ethers.constants.MaxUint256,\r\n      ])\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`/info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: string\r\n  quoteTokenAddress?: string\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {pendingTx ? t('Harvesting') : t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `/info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n  scroll-margin-top: 64px;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container id=\"farms-table\">\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex, SearchIcon } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\r\nimport { ViewMode } from 'state/user/actions'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 22px;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return farmsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"#fff\" \r\n          style={{\r\n            display: 'flex', \r\n            justifyContent: 'center', \r\n            fontSize: \"3.25rem\", \r\n            fontFamily: 'Poppins',\r\n            paddingTop: '0.5rem',\r\n            marginBottom: '20px'\r\n        }}>\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" \r\n          style={{\r\n            color: 'white',\r\n            opacity: 0.65,\r\n            fontSize: '1.25rem',\r\n            fontFamily: 'Poppins',\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          {t('Stake Liquidity Pool (LP) tokens to earn SUTEKU!')}\r\n        </Heading>\r\n        {/* <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink> */}\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer style={{display: 'flex', justifyContent: 'center'}}>\r\n          {/* <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle\r\n                id=\"staked-only-farms\"\r\n                checked={stakedOnly}\r\n                onChange={() => setStakedOnly(!stakedOnly)}\r\n                scale=\"sm\"\r\n              />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls> */}\r\n          <FilterContainer>\r\n            {/* <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper> */}\r\n            <LabelWrapper>\r\n              {/* <Text textTransform=\"uppercase\">{t('Search')}</Text> */}\r\n              <SearchInput onChange={handleChangeQuery} endIcon={<SearchIcon color=\"#04bbfb\" />} placeholder=\"Search by name, symbol, address\"\r\n                style={{\r\n                  background: '#fff',\r\n                  padding: '1.5rem 0.75rem',\r\n                  color: '#05489c',\r\n                }}\r\n              />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={observerRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}