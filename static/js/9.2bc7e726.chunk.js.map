{"version":3,"sources":["views/Pool/index.tsx","components/PositionCard/index.tsx"],"names":["Body","styled","CardBody","theme","colors","dropdownDeep","Pool","account","useActiveWeb3React","t","useTranslation","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","useTokenBalancesWithLoadingIndicator","undefined","v2PairsBalances","fetchingV2PairBalances","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","usePairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","v2Pair","Boolean","style","color","fontFamily","fontSize","fontWeight","margin","title","subtitle","noConfig","id","as","Link","to","display","alignItems","textAlign","padding","letterSpacing","borderRadius","background","height","position","top","right","flexDirection","justifyContent","marginLeft","text","placement","ml","mr","index","pair","mb","mt","cursor","marginTop","marginBottom","FixedHeightRow","RowBetween","MinimalPositionCard","showUnwrapped","currency0","token0","unwrappedToken","currency1","token1","useState","showMore","setShowMore","userPoolBalance","useTokenBalance","totalPoolTokens","useTotalSupply","poolTokenPercentage","JSBI","greaterThanOrEqual","raw","Percent","getLiquidityValue","token0Deposited","token1Deposited","BigInt","gap","bold","onClick","size","small","symbol","toSignificant","toFixed","asset","role","FullPositionCard","props","p","currency","BIG_INT_ZERO","currencyId","variant","width","startIcon"],"mappings":"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","file":"static/js/9.2bc7e726.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Pair } from '@pancakeswap/sdk'\r\nimport { Text, Flex, CardBody, CardFooter, Button, AddIcon } from '@pancakeswap/uikit'\r\nimport { Link } from 'react-router-dom'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport FullPositionCard from '../../components/PositionCard'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/wallet/hooks'\r\nimport { usePairs } from '../../hooks/usePairs'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport Page from '../Page'\r\nimport QuestionHelper from '../../components/QuestionHelper'\r\n// import Logo from \"./logo_Pum.png\"\r\n\r\nconst Body = styled(CardBody)`\r\n  // background-color: ${({ theme }) => theme.colors.dropdownDeep};\r\n  background-color: #fff; //K_K\r\n`\r\n\r\nexport default function Pool() {\r\n  const { account } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  // fetch the user's balances of all tracked V2 LP tokens\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs],\r\n  )\r\n  const liquidityTokens = useMemo(\r\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\r\n    [tokenPairsWithLiquidityTokens],\r\n  )\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens,\r\n  )\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0'),\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances],\r\n  )\r\n\r\n  const v2Pairs = usePairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\r\n  const v2IsLoading =\r\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\r\n\r\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\r\n\r\n  const renderBody = () => {\r\n    if (!account) {\r\n      return (\r\n        <Text color=\"#bdc2c4\" fontSize=\"16px\" fontWeight=\"400\" fontFamily=\"Poppins\" textAlign=\"center\">\r\n          {t('Connect to a wallet to view your liquidity.')}\r\n        </Text>\r\n      )\r\n    }\r\n    if (v2IsLoading) {\r\n      return (\r\n        <Text color=\"#bdc2c4\" fontSize=\"16px\" fontWeight=\"400\" fontFamily=\"Poppins\" textAlign=\"center\">\r\n          <Dots>{t('Loading')}</Dots>\r\n        </Text>\r\n      )\r\n    }\r\n    if (allV2PairsWithLiquidity?.length > 0) {\r\n      return allV2PairsWithLiquidity.map((v2Pair, index) => (\r\n        <FullPositionCard\r\n          key={v2Pair.liquidityToken.address}\r\n          pair={v2Pair}\r\n          mb={index < allV2PairsWithLiquidity.length - 1 ? '16px' : 0}\r\n        />\r\n      ))\r\n    }\r\n    return (\r\n      <Text color=\"#bdc2c4\" fontSize=\"16px\" fontWeight=\"400\" fontFamily=\"Poppins\" textAlign=\"center\">\r\n        {t('No liquidity found.')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <Text\r\n        style={{\r\n          color: '#fff',\r\n          fontFamily: 'Poppins',\r\n          fontSize: '40px',\r\n          fontWeight: 'bolder',\r\n          margin: '0 0 40px 0',\r\n        }}\r\n      >\r\n        Pum Swap\r\n      </Text>\r\n      {/* <img src='/logo_Pum.png' alt='LOGO' style={{width: '20%', margin: '10px 0 40px 0'}} /> */}\r\n      {/* <img src={Logo} alt='LOGO' style={{width: '20%', margin: '10px 0 40px 0'}} /> */}\r\n      <AppBody style={{ margin: '20px' }}>\r\n        <AppHeader title={t('Liquidity')} subtitle={t('')} noConfig=\"false\" />\r\n        <Body>\r\n          <Button\r\n            id=\"join-pool-button\"\r\n            as={Link}\r\n            to=\"/add\"\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              textAlign: 'center',\r\n              padding: '20px 8px',\r\n              letterSpacing: '0.03em',\r\n              borderRadius: '20px',\r\n              background: '#05195a',\r\n              fontWeight: 500,\r\n              fontFamily: 'Poppins',\r\n              height: '30px',\r\n              position: 'absolute',\r\n              top: 33,\r\n              right: 36,\r\n            }}\r\n          >\r\n            {t('Add Liquidity')}\r\n          </Button>\r\n          <Flex flexDirection=\"column\" style={{ padding: '10px 15px' }}>\r\n            <Flex justifyContent=\"space-between\" alignItems=\"center\" style={{ margin: '10px 0 15px 0' }}>\r\n              <Text\r\n                style={{\r\n                  color: '#04bbfb',\r\n                  fontSize: '16px',\r\n                  fontWeight: 400,\r\n                  fontFamily: 'Poppins',\r\n                  marginLeft: '10px',\r\n                }}\r\n              >\r\n                {t('Your Liquidity')}\r\n              </Text>\r\n              <QuestionHelper\r\n                text={t(\r\n                  'When you add liquidity, you are given pool tokens that represent your share. If you donot see a pool you joined in this list, try importing a pool below.',\r\n                )}\r\n                placement=\"left\"\r\n                ml=\"4px\"\r\n                mr=\"10px\"\r\n              />\r\n            </Flex>\r\n            {renderBody()}\r\n            <Flex alignItems=\"baseline\" mt=\"20px\">\r\n              <Text\r\n                style={{\r\n                  color: '#05195a',\r\n                  fontSize: '14px',\r\n                  fontWeight: 400,\r\n                  fontFamily: 'Poppins',\r\n                }}\r\n              >\r\n                {t(\"Don't see a pool you joined?\")}\r\n              </Text>\r\n              <Link\r\n                id=\"import-pool-link\"\r\n                as={Link}\r\n                to=\"/find\"\r\n                style={{\r\n                  color: '#04bbfb',\r\n                  fontWeight: 600,\r\n                  cursor: 'pointer',\r\n                  fontFamily: 'Poppins',\r\n                  fontSize: '14px',\r\n                  marginLeft: '5px',\r\n                }}\r\n              >\r\n                {t('Import it')}\r\n              </Link>\r\n            </Flex>\r\n            <Text\r\n              style={{\r\n                color: '#05195a',\r\n                fontSize: '14px',\r\n                fontWeight: 400,\r\n                fontFamily: 'Poppins',\r\n                marginTop: '15px',\r\n              }}\r\n            >\r\n              {t('Or, if you staked your LP tokens in a farm, unstake them to see them here.')}\r\n            </Text>\r\n            <Text\r\n              style={{\r\n                color: '#04bbfb',\r\n                fontSize: '14px',\r\n                fontWeight: 900,\r\n                fontFamily: 'Poppins',\r\n                cursor: 'pointer',\r\n                marginBottom: '10px',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                marginTop: '20px',\r\n              }}\r\n            >\r\n              {t('How to add liquidity?')}\r\n            </Text>\r\n          </Flex>\r\n\r\n          {/* {account && !v2IsLoading && (\r\n            <Flex flexDirection=\"column\" alignItems=\"center\" mt=\"24px\">\r\n              <Text color=\"textSubtle\" mb=\"8px\">\r\n                {t(\"Don't see a pool you joined?\")}\r\n              </Text>\r\n              <Button id=\"import-pool-link\" variant=\"secondary\" scale=\"sm\" as={Link} to=\"/find\">\r\n                {t('Find other LP tokens')}\r\n              </Button>\r\n            </Flex>\r\n          )} */}\r\n        </Body>\r\n        {/* <CardFooter style={{ textAlign: 'center' }}>\r\n          <Button id=\"join-pool-button\" as={Link} to=\"/add\" width=\"100%\" startIcon={<AddIcon color=\"white\" />}>\r\n        </CardFooter> */}\r\n      </AppBody>\r\n    </Page>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { JSBI, Pair, Percent } from '@pancakeswap/sdk'\r\nimport {\r\n  Button,\r\n  Text,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  CardProps,\r\n  AddIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport useTotalSupply from '../../hooks/useTotalSupply'\r\n\r\nimport { useTokenBalance } from '../../state/wallet/hooks'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\r\n\r\nimport { LightCard } from '../Card'\r\nimport { AutoColumn } from '../Layout/Column'\r\nimport CurrencyLogo from '../Logo/CurrencyLogo'\r\nimport { DoubleCurrencyLogo } from '../Logo'\r\nimport { RowBetween, RowFixed } from '../Layout/Row'\r\nimport { BIG_INT_ZERO } from '../../config/constants'\r\nimport Dots from '../Loader/Dots'\r\n\r\nconst FixedHeightRow = styled(RowBetween)`\r\n  height: 24px;\r\n`\r\n\r\ninterface PositionCardProps extends CardProps {\r\n  pair: Pair\r\n  showUnwrapped?: boolean\r\n}\r\n\r\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\r\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  return (\r\n    <>\r\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\r\n        <Card>\r\n          <CardBody>\r\n            <AutoColumn gap=\"16px\">\r\n              <FixedHeightRow>\r\n                <RowFixed>\r\n                  <Text color=\"secondary\" bold>\r\n                    {t('LP tokens in your wallet')}\r\n                  </Text>\r\n                </RowFixed>\r\n              </FixedHeightRow>\r\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\r\n                <RowFixed>\r\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\r\n                  <Text small color=\"textSubtle\">\r\n                    {currency0.symbol}-{currency1.symbol} LP\r\n                  </Text>\r\n                </RowFixed>\r\n                <RowFixed>\r\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\r\n                </RowFixed>\r\n              </FixedHeightRow>\r\n              <AutoColumn gap=\"4px\">\r\n                <FixedHeightRow>\r\n                  <Text color=\"textSubtle\" small>\r\n                    {t('Share of Pool')}:\r\n                  </Text>\r\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\r\n                </FixedHeightRow>\r\n                <FixedHeightRow>\r\n                  <Text color=\"textSubtle\" small>\r\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\r\n                  </Text>\r\n                  {token0Deposited ? (\r\n                    <RowFixed>\r\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\r\n                    </RowFixed>\r\n                  ) : (\r\n                    '-'\r\n                  )}\r\n                </FixedHeightRow>\r\n                <FixedHeightRow>\r\n                  <Text color=\"textSubtle\" small>\r\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\r\n                  </Text>\r\n                  {token1Deposited ? (\r\n                    <RowFixed>\r\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\r\n                    </RowFixed>\r\n                  ) : (\r\n                    '-'\r\n                  )}\r\n                </FixedHeightRow>\r\n              </AutoColumn>\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </Card>\r\n      ) : (\r\n        <LightCard>\r\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\r\n            <span role=\"img\" aria-label=\"pancake-icon\">\r\n              🥞\r\n            </span>{' '}\r\n            {t(\r\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\r\n            )}\r\n          </Text>\r\n        </LightCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const currency0 = unwrappedToken(pair.token0)\r\n  const currency1 = unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  return (\r\n    <Card style={{ borderRadius: '12px' }} {...props}>\r\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mb=\"4px\">\r\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\r\n            <Text bold ml=\"8px\">\r\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\r\n            </Text>\r\n          </Flex>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {userPoolBalance?.toSignificant(4)}\r\n          </Text>\r\n        </Flex>\r\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n      </Flex>\r\n\r\n      {showMore && (\r\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\r\n          <FixedHeightRow>\r\n            <RowFixed>\r\n              <CurrencyLogo size=\"20px\" currency={currency0} />\r\n              <Text color=\"textSubtle\" ml=\"4px\">\r\n                Pooled {currency0.symbol}\r\n              </Text>\r\n            </RowFixed>\r\n            {token0Deposited ? (\r\n              <RowFixed>\r\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\r\n              </RowFixed>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </FixedHeightRow>\r\n\r\n          <FixedHeightRow>\r\n            <RowFixed>\r\n              <CurrencyLogo size=\"20px\" currency={currency1} />\r\n              <Text color=\"textSubtle\" ml=\"4px\">\r\n                Pooled {currency1.symbol}\r\n              </Text>\r\n            </RowFixed>\r\n            {token1Deposited ? (\r\n              <RowFixed>\r\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\r\n              </RowFixed>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </FixedHeightRow>\r\n\r\n          <FixedHeightRow>\r\n            <Text color=\"textSubtle\">Share of pool</Text>\r\n            <Text>\r\n              {poolTokenPercentage\r\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\r\n                : '-'}\r\n            </Text>\r\n          </FixedHeightRow>\r\n\r\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\r\n            <Flex flexDirection=\"column\">\r\n              <Button\r\n                as={Link}\r\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                variant=\"primary\"\r\n                width=\"100%\"\r\n                mb=\"8px\"\r\n              >\r\n                Remove\r\n              </Button>\r\n              <Button\r\n                as={Link}\r\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                variant=\"text\"\r\n                startIcon={<AddIcon color=\"primary\" />}\r\n                width=\"100%\"\r\n              >\r\n                Add liquidity instead\r\n              </Button>\r\n            </Flex>\r\n          )}\r\n        </AutoColumn>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n"],"sourceRoot":""}